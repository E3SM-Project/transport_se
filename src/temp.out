Index: aquaplanet.F90
===================================================================
--- aquaplanet.F90	(revision 2082)
+++ aquaplanet.F90	(working copy)
@@ -28,8 +28,10 @@
   ! ====================
   use gravity_wave_drag_mod, only : Rayleigh, ue, ve, tme, the, pre, qve
   ! ====================
-  use control_mod, only : statefreq
+  use control_mod, only : statefreq, columnpackage
   ! ====================
+  use column_types_mod, only : ColumnModelMulticloud_t
+  ! ====================
   use global_norms_mod, only: wrap_repro_sum
   ! ====================
   implicit none
@@ -49,6 +51,7 @@
   integer              , public :: isrf_forc
   real (kind=real_kind), public :: h_dis
   real (kind=real_kind), public :: cdrag
+  real (kind=real_kind), public :: chdrag
   real (kind=real_kind), public :: wstar
   real (kind=real_kind), public :: tsurf
   real (kind=real_kind), public :: qsurf
@@ -65,6 +68,8 @@
   public :: aquaplanet_init_state
   public :: aquaplanet_forcing
   public :: Potential_Temperature
+  public :: presc_cooling_mc
+
   real (kind=real_kind),allocatable :: ff_min(:,:),ff_max(:,:)
 
   real (kind=real_kind) :: udrag_min,udrag_max
@@ -90,7 +95,8 @@
   real (kind=real_kind), allocatable,public :: tsflx(:,:,:)
 
 contains
-  subroutine aquaplanet_forcing(dt,ie, elemin,hybrid,hvcoord,nets,nete,tl)
+
+  subroutine aquaplanet_forcing(dt,ie, elemin,hybrid,hvcoord,nets,nete,tl,mc)
     real (kind=real_kind),intent(in) :: dt
     type (element_t), intent(inout)  :: elemin
     integer, intent(in)              :: ie
@@ -99,6 +105,8 @@
     type (TimeLevel_t), intent(in)   :: tl
     integer,intent(in)               :: nets,nete
 
+    type (ColumnModelMulticloud_t), intent(in), optional :: mc
+
 #ifdef FORCINGSTAT
     real (kind=real_kind) :: tcool_pmin,tcool_pmax,tcool_psum
 #endif
@@ -112,16 +120,20 @@
     iprint=0
 !    if ((tl%nstep==0).and.(hybrid%masterthread).and.(ie==nets)) iprint=1
 
-    if(cool_ampl.ne.0.) then
-       cooling=presc_cooling(hvcoord,np,nlev,iprint) ! cooling can change in time
+    ! cooling is embedded in MC param thus do not do it here...
 
-       do k=1,nlev
-          do j=1,np
-             do i=1,np
-                elemin%derived%FT(i,j,k,nm1) = elemin%derived%FT(i,j,k,nm1) + cooling(k)
+    if(columnpackage .ne. "multicloud")then
+       if(cool_ampl.ne.0.) then
+          cooling=presc_cooling(hvcoord,np,nlev,iprint) ! cooling can change in time
+          
+          do k=1,nlev
+             do j=1,np
+                do i=1,np
+                   elemin%derived%FT(i,j,k,nm1) = elemin%derived%FT(i,j,k,nm1) + cooling(k)*elemin%state%mask(i,j)
+                enddo
              enddo
           enddo
-       enddo
+       endif
 
 #ifdef FORCINGSTAT
 !       if(ie==nete .and. MODULO(tl%nstep,statefreq) == 0) then
@@ -206,15 +218,51 @@
 
   end function presc_cooling
 
+  function presc_cooling_mc(hvcoord,mc,npts,nlevels,iprint) result(cooling)
+
+    integer, intent(in)          :: npts
+    integer, intent(in)          :: nlevels
+    integer, intent(in)          :: iprint
+    type (hvcoord_t), intent(in) :: hvcoord
+    real (kind=real_kind), dimension(nlevels) :: cooling
+    type (ColumnModelMulticloud_t), intent(in) :: mc
+
+    ! Local variables
+
+    real (kind=real_kind), parameter :: href = 7.34D3
+    real (kind=real_kind), dimension(nlevels)   :: zfull
+    real (kind=real_kind) :: cool_ampl_per_sec,func23,rnlev,a,b,c
+    integer :: k
+
+    do k=1,nlevels
+       cooling(k) = mc%Q0R1*mc%D%psitrunc(k,1) + mc%D%Q0R2*(mc%D%psitrunc(k,2)-mc%csr*mc%D%psi2avgtrunc)
+    end do
+
+    if (iprint.eq.1)then
+       do k=1,nlevels
+          print 1,'cooling:',k,zfull(k), &
+               cool_ampl,' [K]',cool_max,cool_min,cooling(k),' [K/sec]'
+       end do
+    endif
+
+    if (iprint.eq.1) print *
+1   format(a8,i3,f8.1,f6.2,a4,2f8.1,f12.8,a8)
+
+  end function presc_cooling_mc
+
+
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
+!  subroutine aquaplanet_init_state(elem, hybrid,hvcoord,nets,nete, integration,noisestart)
   subroutine aquaplanet_init_state(elem, hybrid,hvcoord,nets,nete, integration)
+
     type (element_t), intent(inout) :: elem(:)
     type (hybrid_t),intent(in)       :: hybrid	
     type (hvcoord_t), intent(in) :: hvcoord
     integer, intent(in)   :: nets
     integer, intent(in)   :: nete
     character(len=*)    , intent(in) :: integration 
+ !   integer, intent(in)   :: noisestart
     !ccccccccccccccccccccccccccccccccccccccccccccccccccc
     !cc environmental sounding:
     !cc "0000 UTC, 1 September 1974 GARP-GATE sounding"
@@ -251,6 +299,7 @@
 
     real(kind=real_kind) ::  aa,bb,cc,uur,uu0,uu1,vv1,rearthi,zearth,fcorio,tmpf
     real(kind=real_kind) ::  zabscal,zabsamp
+    real(kind=real_kind) ::  u0loc
     real(kind=real_kind) ::  ff_pmin,ff_pmax
 
     !cccccccccccccccccccccccccccccccccccccccc
@@ -748,7 +797,8 @@
     ! forces for the momentum, temperature and moisture
     !---------------------------------------------------
     if(kmin .eq. 1) then
-       call abortmp('it appears that surface forcing is being applied at TOA')
+       !print *, 'it appears that surface forcing is being applied at TOA'
+       !call abortmp('it appears that surface forcing is being applied at TOA')
     end if
     do k=kmin,nlevels-1
        do j=1,np
Index: cslam_bench_mod.F90
===================================================================
--- cslam_bench_mod.F90	(revision 2082)
+++ cslam_bench_mod.F90	(working copy)
@@ -16,7 +16,7 @@
                        edgeVpack, edgeVunpack, freeedgebuffer 
   use dimensions_mod, only: nelem, nelemd, nelemdmax, nlev, np, ne, nc, nhc, nhe, nlev, ntrac
   use time_mod, only : timelevel_t
-  use element_mod, only : element_t
+  use element_mod, only : element_t, timelevels
   use hybrid_mod, only : hybrid_t
 
 contains
@@ -100,7 +100,7 @@
   real (kind=real_kind)                                              :: xtmp
   real (kind=longdouble_kind)                                        :: cslam_nodes(nc+1)
   
-  real (kind=real_kind), dimension(np,np,2)    :: vstar, vstar1, vstar0
+  real (kind=real_kind), dimension(np,np,2)    :: vstar, vhat
   real (kind=real_kind)                        :: maxcflx, maxcfly  
   
   integer  choosetrac, chooselev   !for test reason the output
@@ -144,7 +144,7 @@
     enddo
     !
     !first exchange of the initial values
-    call ghostVpack(cellghostbuf, cslam(ie)%c(:,:,:,:,tl%n0),nhc,nc,nlev,ntrac,0,elem(ie)%desc)
+    call ghostVpack(cellghostbuf, cslam(ie)%c,nhc,nc,nlev,ntrac,0,tl%n0,timelevels,elem(ie)%desc)
     ! reset the new unknown
     do k=1,nlev
       do itr=1,ntrac
@@ -162,7 +162,7 @@
 !-----------------------------------------------------------------------------------!    
 
   do ie=nets,nete
-    call ghostVunpack(cellghostbuf, cslam(ie)%c(:,:,:,:,tl%n0), nhc, nc,nlev,ntrac, 0, elem(ie)%desc)
+     call ghostVunpack(cellghostbuf, cslam(ie)%c, nhc, nc,nlev,ntrac, 0, tl%n0, timelevels,elem(ie)%desc)
     ! for the mass value
     global_shared_buf(ie,1)=0D0
     global_shared_buf(ie,1)=cslam(ie)%elem_mass
@@ -249,12 +249,10 @@
   DO WHILE(tl%nstep<nmax)
     do ie=nets,nete
       do k=1,nlev
-        vstar1 = get_boomerang_velocities_gll(elem(ie), time_at(tl%nstep+1))
-        vstar0 = get_boomerang_velocities_gll(elem(ie), time_at(tl%nstep))
-        
-        vstar= (vstar0 + vstar1) / 2.0D0
+        vstar = get_boomerang_velocities_gll(elem(ie), time_at(tl%nstep+1))
+        vhat= (get_boomerang_velocities_gll(elem(ie), time_at(tl%nstep)) + vstar) / 2.0D0
         ! calculate high order approximation
-        call cslam_mcgregor(elem(ie), deriv, tstep, vstar, 3)
+        call cslam_mcgregor(elem(ie), deriv, tstep, vhat, vstar, 3)
      
         ! apply DSS to make vstar C0
         elem(ie)%derived%vstar(:,:,1,k) = elem(ie)%spheremp(:,:)*vstar(:,:,1) 
Index: cslam_main.F90
===================================================================
--- cslam_main.F90	(revision 2082)
+++ cslam_main.F90	(working copy)
@@ -148,10 +148,10 @@
   ! ================================================
   call t_stopf('Total')
   write(numproc_char,*) par%nprocs
-  write(numtrac_char,*) ntrac
+  write(numtrac_char,*) qsize
 !   call system('mkdir -p '//'time/'//trim(adjustl(numproc_char))//'-'//trim(adjustl(numtrac_char))) 
 !  call t_prf('time/'//trim(adjustl(numproc_char))//'/'//trim(adjustl(numtrac_char))//'/HommeCSLAMTime',par%comm)
-  call t_prf('HommeCSLAMTime',par%comm)
+  call t_prf('HommeSETime',par%comm)
   call t_finalizef()
   call haltmp("exiting program...")
   deallocate(elem)
Index: cwfv_bench_mod.F90
===================================================================
--- cwfv_bench_mod.F90	(revision 2082)
+++ cwfv_bench_mod.F90	(working copy)
@@ -15,7 +15,7 @@
                        ghostVpack, ghostVunpack
   use dimensions_mod, only: nelem, nelemd, nelemdmax, nlev, ne, nc, nhc, nhe, nlev, ntrac
   use time_mod, only : timelevel_t
-  use element_mod, only : element_t
+  use element_mod, only : element_t, timelevels
   use cslam_control_volume_mod, only: cslam_struct
   use hybrid_mod, only : hybrid_t
   use cslam_mod, only: cellghostbuf
@@ -142,7 +142,7 @@
     enddo
     !
     !first exchange of the initial values
-    call ghostVpack(cellghostbuf, cslam(ie)%c(:,:,:,:,tl%n0),nhc,nc,nlev,ntrac,kptr,elem(ie)%desc)
+    call ghostVpack(cellghostbuf, cslam(ie)%c,nhc,nc,nlev,ntrac,0,tl%n0,timelevels,elem(ie)%desc)
     ! reset the new unknown
     do k=1,nlev
       do itr=1,ntrac
@@ -161,7 +161,7 @@
 
   do ie=nets,nete
     kptr=0
-    call ghostVunpack(cellghostbuf, cslam(ie)%c(:,:,:,:,tl%n0), nhc, nc,nlev,ntrac, kptr, elem(ie)%desc)
+     call ghostVunpack(cellghostbuf, cslam(ie)%c, nhc, nc,nlev,ntrac, 0, tl%n0, timelevels,elem(ie)%desc)
     ! for the mass value
     global_shared_buf(ie,1)=0D0
     global_shared_buf(ie,1)=cslam(ie)%elem_mass
Index: prim_main.F90
===================================================================
--- prim_main.F90	(revision 2082)
+++ prim_main.F90	(working copy)
@@ -273,10 +273,10 @@
   call t_stopf('Total')
   if(par%masterproc) print *,"writing timing data"
   write(numproc_char,*) par%nprocs
-  write(numtrac_char,*) ntrac
+  write(numtrac_char,*) qsize
 !   call system('mkdir -p '//'time/'//trim(adjustl(numproc_char))//'-'//trim(adjustl(numtrac_char))) 
-  call t_prf('time/HommeCSLAMTime-'//trim(adjustl(numproc_char))//'-'//trim(adjustl(numtrac_char)),par%comm)
-!   call t_prf('HommeTimeSE', par%comm)
+!   call t_prf('time/HommeSETime-'//trim(adjustl(numproc_char))//'-'//trim(adjustl(numtrac_char)),par%comm)
+  call t_prf('HommeTime', par%comm)
   if(par%masterproc) print *,"calling t_finalizef"
   call t_finalizef()
   call haltmp("exiting program...")
Index: prim_movie_mod.F90
===================================================================
--- prim_movie_mod.F90	(revision 2082)
+++ prim_movie_mod.F90	(working copy)
@@ -111,9 +111,7 @@
     use pio, only : PIO_InitDecomp, pio_setdebuglevel, pio_int, pio_double, pio_closefile !_EXTERNAL
     use netcdf_io_mod, only : iodesc2d, iodesc3d, iodesc2d_nc, iodesc3d_nc, iodesc3d_subelem, iodesct, pio_subsystem 
     use common_io_mod, only : num_io_procs, num_agg, io_stride
-#ifdef _CSLAM
     use cslam_control_volume_mod, only : cslam_mesh_ari
-#endif
     type (element_t), intent(in) :: elem(:)
     type (parallel_t), intent(in)     :: par
     type (hvcoord_t), intent(in) :: hvcoord
@@ -403,7 +401,6 @@
              deallocate(var3d)
           end if
 
-#ifdef _CSLAM          
           allocate(var1(nc*nc*nelemd,nlev))
           allocate(var2(nc*nc*nelemd,nlev))
           if( (nf_selectedvar('phys_lat', output_varnames))) then
@@ -493,11 +490,11 @@
           endif
           deallocate(var1)
           deallocate(var2)
-#else
-          if( (nf_selectedvar('phys_lat', output_varnames))) then
-             if (par%masterproc) print *,'WARNING: compile with -D_CSLAM to output CSLAM grid coordinate data'
-          endif
-#endif
+! #else
+!           if( (nf_selectedvar('phys_lat', output_varnames))) then
+!              if (par%masterproc) print *,'WARNING: compile with -D_CSLAM to output CSLAM grid coordinate data'
+!           endif
+! #endif
           if (par%masterproc) print *,'done writing coordinates ios=',ios
        end if
     end do
Index: prim_restart_mod.F90
===================================================================
--- prim_restart_mod.F90	(revision 2082)
+++ prim_restart_mod.F90	(working copy)
@@ -109,7 +109,7 @@
 
     if(columnpackage .eq. "emanuel") then
        ! see comments in restart_io_mod.F90
-       call abortmp('Error: restart w/ Emanual physics currently broken')
+       !call abortmp('Error: restart w/ Emanual physics currently broken')
        len = SIZE(pelem(1)%state%CBMF)
        call AddStateField(RestDesc,len,type)
     end if
